# TODO: Multi-AZ configuration
# TODO: HTTPS
# TODO: Data persistance layer

Parameters:

  GitHubRepoOwner:
    Type: String
    Default: MaksimAniskov 

  GitHubRepoName: 
    Type: String
    Default: aws-opsworks-webapp-stack-sample-app 

  GitHubRepoBranch:
    Type: String
    Default: master 

  InstanceType:
    Type: String
    Default: t3.micro

  VpcId:
    Type: AWS::EC2::VPC::Id

  DefaultSubnetId:
    Type: AWS::EC2::Subnet::Id

  SshKeyPair:
    Type: String
    Default: ""

  EnableCiCd:
    Type: String
    Default: no

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - Label: 
          default: Node.js Application GitHub Repository
        Parameters: 
          - GitHubRepoOwner
          - GitHubRepoName
          - GitHubRepoBranch
      - Label: 
          default: Configuration
        Parameters: 
          - VpcId
          - DefaultSubnetId
          - InstanceType
      - Label: 
          default: Options
        Parameters:
          - EnableCiCd
          - SshKeyPair
    ParameterLabels: 
      GitRepoOwner:
        default: Owner's GitHub user name
      GitRepoName:
        default: Repo name
      GitRepoBranch:
        default: Branch
      VpcId:
        default: VPC Id
      DefaultSubnetId:
        default: Subnet Id
      InstanceType:
        default: Instance Type
      SshKeyPair:
        default: SSH Key Pair Name
      EnableCiCd:
        default: >
          IMPORTANT! Available only in us-east-1 region. Type in 'true' to create a CodePipeline pipeline which will install GitHub hook
          and automatically deploy new app versions.
          IMPORTANT! Before to proceed further, go to GitHub to create a Personal Access Token
          with admin:repo_hook permission.
          Then create a Secret with name opsworks-cicd-example on SecretsManager,
          its JSON payload must containg a Secret Key with name GitHubOAuthToken,
          use the GitHub token as the value.

Conditions:
  SshKeyPairDefined: !Not [!Equals [ !Ref SshKeyPair, "" ]]
  CreateCiCd: !Equals [ !Ref EnableCiCd, yes ]

Resources:

  OpsWorksStack:
    Type: AWS::OpsWorks::Stack
    Properties:
      Name: !Ref AWS::StackName
      ServiceRoleArn: !GetAtt OpsWorksServiceRole.Arn
      DefaultInstanceProfileArn: !GetAtt InstanceProfile.Arn
      ConfigurationManager:
        Name: Chef
        Version: 12 # As of September 2018 the default is 11.4
      DefaultOs: Amazon Linux 2018.03 # As of September 2018 the default is Amazon Linux 2018.03 which does not support Chef 12
      DefaultRootDeviceType: ebs # The default is instance-store
      UseCustomCookbooks: true
      CustomCookbooksSource:
          Type: archive
          Url: https://github.com/MaksimAniskov/opsworks_nodejs/blob/master/package/opsworks_nodejs.tar.gz?raw=true
      VpcId: !Ref VpcId
      DefaultSubnetId: !Ref DefaultSubnetId
      DefaultSshKeyName: !If [SshKeyPairDefined, !Ref SshKeyPair, !Ref "AWS::NoValue"]
  
  WebAppLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: Web Application
      Shortname: web-app
      Type: custom
      CustomRecipes:
        Setup:
          - opsworks_nodejs::setup
        Deploy:
          - opsworks_nodejs::deploy
      CustomJson: |
        {
            "nodejs": {
                "version": "8.12.0",
                "linux_x64_binary_checksum": "3df19b748ee2b6dfe3a03448ebc6186a3a86aeab557018d77a0f7f3314594ef6"
            }
        }
      CustomSecurityGroupIds:
        - !Ref WebAppSecurityGroup
      LoadBasedAutoScaling:
        Enable: true
        UpScaling:
          CpuThreshold: 75
        DownScaling: 
          CpuThreshold: 50
      AutoAssignPublicIps: yes # Required for instance setup
      AutoAssignElasticIps: no
      EnableAutoHealing: yes
      StackId: !Ref OpsWorksStack

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref InstanceProfileRole

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
                Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOpsWorksCloudWatchLogs

  OpsWorksServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
                Service: opsworks.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument: 
            Statement: 
              - Effect: Allow
                Action:
                  - ec2:*
                  - iam:PassRole
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:DescribeAlarms
                  - ecs:*
                  - elasticloadbalancing:*
                  - rds:*
                Resource: "*"

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Web Application

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Load Balancer

  WebApp:
    Type: AWS::OpsWorks::App
    Properties: 
      Name: HelloWorld
      Type: other # Type nodejs not supported by configuration manager Chef::12
      StackId: !Ref OpsWorksStack
      AppSource:
        Type: git
        Url: !Sub https://github.com/${GitHubRepoOwner}/${GitHubRepoName}.git
      Environment:
        - Key: PORT
          Value: 80
        - Key: NODE_ENV
          Value: production

  Instance24x7:
    Type: AWS::OpsWorks::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      StackId: !Ref OpsWorksStack
      LayerIds:
        - !Ref WebAppLayer

  # See https://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling-loadbased.html
  # "Automatic load-based scaling does not create new instances; it starts and stops only those
  # instances that you have created. You must therefore provision enough load-based instances in
  # advance to handle the maximum anticipated load."
  InstanceLoadBased1:
    Type: AWS::OpsWorks::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      StackId: !Ref OpsWorksStack
      LayerIds:
        - !Ref WebAppLayer
      AutoScalingType: load

  InstanceLoadBased2:
    Type: AWS::OpsWorks::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      StackId: !Ref OpsWorksStack
      LayerIds:
        - !Ref WebAppLayer
      AutoScalingType: load

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer # That's a Classic LB. AWS OpsWorks Stacks does not support Application Load Balancer
    Properties:
      Scheme: internet-facing
      Listeners:
        - Protocol: HTTP
          LoadBalancerPort: 80
          InstanceProtocol: HTTP
          InstancePort: 80
      Subnets:
        - !Ref DefaultSubnetId
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      HealthCheck:
        Target: HTTP:80/
        Interval: 30
        Timeout: 3
        HealthyThreshold: 2
        UnhealthyThreshold: 2

  LoadBalancerAttachment:
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties: 
      ElasticLoadBalancerName: !Ref LoadBalancer
      LayerId: !Ref WebAppLayer

  Pipeline:
    Condition: CreateCiCd
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      RestartExecutionOnUpdate: false
      ArtifactStore:
        Type: S3 
        Location: !Ref PipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source 
              ActionTypeId:
                Category: Source 
                Owner: ThirdParty 
                Provider: GitHub
                Version: 1 
              Configuration:
                  Owner: !Ref GitHubRepoOwner
                  Repo: !Ref GitHubRepoName
                  Branch: !Ref GitHubRepoBranch
                  OAuthToken: '{{resolve:secretsmanager:opsworks-cicd-example:SecretString:GitHubOAuthToken}}'
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy 
                Owner: AWS 
                Provider: OpsWorks
                Version: 1 
              Configuration:
                StackId: !Ref OpsWorksStack
                LayerId: !Ref WebAppLayer
                AppId: !Ref WebApp
                DeploymentType: deploy_app 
              InputArtifacts:
                - Name: SourceArtifact

  PipelineArtifactsBucket:
    Condition: CreateCiCd
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms

  PipelineRole:
    Condition: CreateCiCd
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
                Service: codepipeline.amazonaws.com
      Policies:
        - PolicyName: S3
          PolicyDocument: 
            Statement: 
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub "${PipelineArtifactsBucket.Arn}/*"
        - PolicyName: OpsWorks
          PolicyDocument: 
            Statement: 
              - Effect: Allow
                Action:
                  - opsworks:CreateDeployment
                  - opsworks:UpdateApp
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeCommands
                  - opsworks:DescribeApps
                Resource: !Sub arn:aws:opsworks:${AWS::Region}:${AWS::AccountId}:stack/${OpsWorksStack}/

  InstanceProfileRoleCiCdArtifactsBucketPolicy:
    Condition: CreateCiCd
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: S3
      Roles:
        - !Ref InstanceProfileRole
      PolicyDocument: 
        Statement: 
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub "${PipelineArtifactsBucket.Arn}/*"

Outputs:
  DNSName:
    Value: !GetAtt LoadBalancer.DNSName
  CicdArtifactsBucket:
    Condition: CreateCiCd
    Value: !Ref PipelineArtifactsBucket
