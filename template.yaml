# TODO: T2/T3 Unlimited
# TODO: Load balancing and autoscaling
# TODO: HTTPS
# TODO: Data persistance layer

Parameters:

  InstanceType:
    Type: String
    Default: t3.micro

  VpcId:
    Type: AWS::EC2::VPC::Id

  DefaultSubnetId:
    Type: AWS::EC2::Subnet::Id

Resources:

  OpsWorksStack:
    Type: AWS::OpsWorks::Stack
    Properties:
      Name: !Ref AWS::StackName
      ServiceRoleArn: !GetAtt OpsWorksServiceRole.Arn
      DefaultInstanceProfileArn: !GetAtt InstanceProfile.Arn
      ConfigurationManager:
        Name: Chef
        Version: 12 # As of September 2018 the default is 11.4
      DefaultOs: Amazon Linux 2018.03 # As of September 2018 the default is Amazon Linux 2018.03 which does not support Chef 12
      DefaultRootDeviceType: ebs # The default is instance-store
      UseCustomCookbooks: true
      CustomCookbooksSource:
          Type: archive
          Url: https://github.com/MaksimAniskov/opsworks_nodejs/blob/master/package/opsworks_nodejs.tar.gz?raw=true
      VpcId: !Ref VpcId
      DefaultSubnetId: !Ref DefaultSubnetId
      ElasticIps:
        - Ip: !Ref ElasticIp
  
  WebAppLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: Web Application
      Shortname: web-app
      Type: custom
      CustomRecipes:
        Setup:
          - opsworks_nodejs::setup
        Deploy:
          - opsworks_nodejs::deploy
      CustomJson: |
        {
            "nodejs": {
                "version": "8.12.0",
                "linux_x64_binary_checksum": "3df19b748ee2b6dfe3a03448ebc6186a3a86aeab557018d77a0f7f3314594ef6"
            }
        }      
      CustomSecurityGroupIds:
        - !GetAtt WebAppSecurityGroup.GroupId
      AutoAssignPublicIps: no
      AutoAssignElasticIps: no
      EnableAutoHealing: yes
      StackId: !Ref OpsWorksStack

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref InstanceProfileRole

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
                Service: ec2.amazonaws.com

  OpsWorksServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
                Service: opsworks.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument: 
            Statement: 
              - Effect: Allow
                Action:
                  - ec2:*
                  - iam:PassRole
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:DescribeAlarms
                  - ecs:*
                  - elasticloadbalancing:*
                  - rds:*
                Resource: "*"

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Web Application

  WebApp:
    Type: AWS::OpsWorks::App
    Properties: 
      Name: HelloWorld
      Type: other # Type nodejs not supported by configuration manager Chef::12
      StackId: !Ref OpsWorksStack
      AppSource:
        Type: git
        Url: https://github.com/MaksimAniskov/aws-opsworks-webapp-stack-sample-app.git
      Environment:
        - Key: PORT
          Value: 80
        - Key: NODE_ENV
          Value: production

  Instance:
    Type: AWS::OpsWorks::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      StackId: !Ref OpsWorksStack
      LayerIds:
        - !Ref WebAppLayer
      ElasticIps:
        - !Ref ElasticIp

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

Outputs:
  IpAddress:
    Value: !Ref ElasticIp
